name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: kurban_cebimde_test
  REDIS_URL: redis://localhost:6379

jobs:
  # =============================================================================
  # 🔍 CODE QUALITY & LINTING
  # =============================================================================
  lint:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r backend/requirements.txt
        
    - name: 🎨 Check code formatting (Black)
      run: |
        cd backend
        black --check --diff .
        
    - name: 📏 Check import sorting (isort)
      run: |
        cd backend
        isort --check-only --diff .
        
    - name: 🔍 Lint with flake8
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: 🔬 Type checking (mypy)
      run: |
        cd backend
        mypy . --ignore-missing-imports
        
    - name: 🧹 Security check (bandit)
      run: |
        pip install bandit
        cd backend
        bandit -r . -f json -o bandit-report.json || true
        
  # =============================================================================
  # 🧪 BACKEND TESTING
  # =============================================================================
  backend-test:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx
        
    - name: 🔧 Set up test environment
      run: |
        cd backend
        cp env.example .env
        echo "DATABASE_URL=postgresql://postgres:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}" >> .env
        echo "REDIS_URL=${{ env.REDIS_URL }}" >> .env
        echo "SECRET_KEY=test-secret-key-for-ci" >> .env
        echo "DEBUG=true" >> .env
        
    - name: 🗄️ Wait for database
      run: |
        timeout 30s bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'
        
    - name: 🗄️ Wait for Redis
      run: |
        timeout 30s bash -c 'until redis-cli ping; do sleep 1; done'
        
    - name: 🧪 Run tests
      run: |
        cd backend
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
        
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        
    - name: 📈 Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: backend/htmlcov/
        
  # =============================================================================
  # 📱 FRONTEND TESTING
  # =============================================================================
  frontend-test:
    name: 📱 Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          kurban-cebimde/package-lock.json
          admin-panel/package-lock.json
          
    - name: 📦 Install React Native dependencies
      run: |
        cd kurban-cebimde
        npm ci
        
    - name: 📦 Install Admin Panel dependencies
      run: |
        cd admin-panel
        npm ci
        
    - name: 🔍 Lint React Native code
      run: |
        cd kurban-cebimde
        npm run lint || echo "Lint script not found, skipping..."
        
    - name: 🔍 Lint Admin Panel code
      run: |
        cd admin-panel
        npm run lint || echo "Lint script not found, skipping..."
        
    - name: 🧪 Test React Native
      run: |
        cd kurban-cebimde
        npm test -- --coverage --watchAll=false || echo "Tests not configured yet"
        
    - name: 🧪 Test Admin Panel
      run: |
        cd admin-panel
        npm test -- --coverage --watchAll=false || echo "Tests not configured yet"
        
    - name: 🏗️ Build React Native
      run: |
        cd kurban-cebimde
        npm run build || echo "Build script not found, skipping..."
        
    - name: 🏗️ Build Admin Panel
      run: |
        cd admin-panel
        npm run build || echo "Build script not found, skipping..."
        
  # =============================================================================
  # 🐳 DOCKER BUILD & TEST
  # =============================================================================
  docker-test:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build Docker images
      run: |
        docker-compose build --parallel
        
    - name: 🧪 Test Docker containers
      run: |
        docker-compose up -d
        sleep 30
        
        # Health check
        curl -f http://localhost:8000/health || exit 1
        
        # Test endpoints
        curl -f http://localhost:8000/api/test/v1/ || exit 1
        
        docker-compose down
        
  # =============================================================================
  # 🔒 SECURITY SCANNING
  # =============================================================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📊 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: 🔍 Run Snyk security scan
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
  # =============================================================================
  # 📊 API TESTING
  # =============================================================================
  api-test:
    name: 📊 API Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
        
    - name: 🔧 Set up test environment
      run: |
        cd backend
        cp env.example .env
        echo "DATABASE_URL=postgresql://postgres:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}" >> .env
        echo "REDIS_URL=${{ env.REDIS_URL }}" >> .env
        echo "SECRET_KEY=test-secret-key-for-ci" >> .env
        echo "DEBUG=true" >> .env
        
    - name: 🚀 Start backend server
      run: |
        cd backend
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: 🧪 Run API tests
      run: |
        cd backend
        pytest tests/api/ -v || echo "API tests not configured yet"
        
    - name: 📋 Test Postman collection
      run: |
        # Install Newman (Postman CLI)
        npm install -g newman
        
        # Run Postman collection tests
        newman run postman/KurbanCebimde_API.postman_collection.json \
          -e postman/KurbanCebimde_Environment.postman_environment.json \
          --reporters cli,json \
          --reporter-json-export newman-report.json || echo "Postman tests failed"
        
  # =============================================================================
  # 🚀 DEPLOYMENT (Only on main branch)
  # =============================================================================
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, backend-test, frontend-test, docker-test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 🏗️ Build and push Docker images
      run: |
        docker build -t kurban-cebimde-api:latest ./backend
        docker build -t kurban-cebimde-admin:latest ./admin-panel
        
        docker tag kurban-cebimde-api:latest ${{ secrets.DOCKER_USERNAME }}/kurban-cebimde-api:latest
        docker tag kurban-cebimde-admin:latest ${{ secrets.DOCKER_USERNAME }}/kurban-cebimde-admin:latest
        
        docker push ${{ secrets.DOCKER_USERNAME }}/kurban-cebimde-api:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/kurban-cebimde-admin:latest
        
    - name: 🚀 Deploy to production
      run: |
        echo "Deployment to production would happen here"
        echo "This could be AWS ECS, Google Cloud Run, Azure Container Instances, etc."
        
  # =============================================================================
  # 📊 PERFORMANCE TESTING
  # =============================================================================
  performance-test:
    name: 📊 Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-test]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        pip install locust
        
    - name: 🚀 Start backend server
      run: |
        cd backend
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: 📊 Run performance tests
      run: |
        locust -f tests/performance/locustfile.py \
          --host=http://localhost:8000 \
          --users=100 \
          --spawn-rate=10 \
          --run-time=60s \
          --headless \
          --html=performance-report.html || echo "Performance tests not configured yet"
        
    - name: 📈 Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.html
        
  # =============================================================================
  # 📋 NOTIFICATIONS
  # =============================================================================
  notify:
    name: 📋 Notify Team
    runs-on: ubuntu-latest
    needs: [lint, backend-test, frontend-test, docker-test, security, api-test]
    if: always()
    
    steps:
    - name: 📧 Send email notification
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: '🚨 CI/CD Pipeline Failed - KurbanCebimde'
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: 'CI/CD Bot'
        body: |
          CI/CD Pipeline failed for commit ${{ github.sha }}
          
          Check the details at: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          Failed jobs: ${{ needs.lint.result }} ${{ needs.backend-test.result }} ${{ needs.frontend-test.result }}
        
    - name: 💬 Send Slack notification
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#ci-cd'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
